AbstractTileLoopsCheck_LoopFormNotSupported=Loop form not supported (not a 0-based counted loop)
DistributeLoopsCheck_BodyNotCompound=Loop body is not a compound statement, so distribution cannot be performed
DistributeLoopsCheck_IsolatesDeclarationStatement=Loop distribution isolates declaration statement
DistributeLoopsCheck_LoopCarriesDependence=Distribution cannot be performed because the loop carries a dependence
DistributeLoopsCheck_LoopIsAccConstruct=Loop is an OpenACC construct, so distribution may change its behavior
DistributeLoopsCheck_OnlyOneStatement=Loop distribution can only be applied if there is more than one statement in the loop body.
Expand_Above=above
Expand_Below=below
Expand_ConstructWillNotIncludeBadCtlFlowStatements=Construct will not expand %s statement that may cause premature exit from the construct
Expand_ConstructWillNotIncludeOtherOACCConstruct=Construct will not expand %s another existing OpenACC construct
Expand_ConstructWillNotIncludeStatementToChangeDataTransfer=Construct will not expand %s statement that may alter values copied to or from the accelerator
Expand_CopyIdentifierWillBeRemoved=Identifier "%s" will be removed from copy clause
Expand_CopyinIdentifierWillBeRemoved=Identifier "%s" will be removed from copyin clause
Expand_CopyoutIdentifierWillBeRemoved=Identifier "%s" will be removed from copyout clause
ExpandDataConstruct_CreateIdentifierWillBeRemoved=Identifier "%s" will be removed from create clause
ExpandDataConstructCheck_MustBeDataConstruct=The pragma must be a data construct
ExpandDataConstructCheck_PromoteDataTransferProblemIndexVar=Construct will be promoted above its containing for loop, but doing so may change the value of the index variable copied in
ExpandDataConstructCheck_PromoteDataTransferProblemNonIndexVar=Construct will be promoted above its containing for loop, but doing so may change the value of {0} (line {1}) copied to or from the accelerator
ForLoopCheck_CannotAnalyzeDependences=Dependences could not be analyzed
ForLoopCheck_CannotRefactor=Cannot refactor loops containing break, continue, or goto
FuseLoopsCheck_CannotFuseDifferentPragmas=When a loop has a pragma associated with it, it cannot be fused unless both loops have identical pragmas
FuseLoopsCheck_DefinitionsMayConflict=A definition of "%s" in the first loop may conflict with "%s" used in the second loop
FuseLoopsCheck_DependencesNotAnalyzed=Dependences could not be analyzed
FuseLoopsCheck_FusionCreatesDependence=These loops cannot be fused because doing so creates a dependence
FuseLoopsCheck_MustBeTwoLoops=There is there must be two loops for fusion to be possible
InterchangeLoopsCheck_Depth=depth 
InterchangeLoopsCheck_InterchangingSelectedLoopWith=Interchanging the selected loop with the loop at 
InterchangeLoopsCheck_NoForLoopAtNestDepth=There is no for-loop at perfect loop nest depth 
InterchangeLoopsCheck_OfLoopNest=of the loop nest.
InterchangeLoopsCheck_OnlyPerfectlyNested=Only perfectly nested loops can be interchanged.
InterchangeLoopsCheck_PerfectlyNestedLoopHeadersOfFirst=perfectly nested loop headers of first.
InterchangeLoopsCheck_Period=.
InterchangeLoopsCheck_SecondForMustBeWithin=Second for-statement must be within
InterchangeLoopsCheck_WillChangeDependenceStructure=\ will change the dependence structure 
IntroAtomicCheck_MustBeExpression=Not introducing atomic to statement on line %d - Statement must be an expression statement.
IntroAtomicCheck_MustBeInsideForLoop=Not introducing atomic to statement on line %d - Statement cannot be inside a for loop declaration.
IntroAtomicCheck_NoStatementsSelected=No statements selected
IntroAtomicCheck_NoSuitableAtomicTypeFound=Not introducing atomic to statement on line %d - No suitable atomic type found.
IntroAtomicCheck_NotInParallelRegion=Not introducing atomic to statement on line %d - Statement is not in a parallel region.
IntroDataConstructCheck_ConditionalDefinitionMayRequireAdditionalDataTransfer=\"{0}\" statement on line {1} may not execute, but it contains assignments to variables that will be copied to or from the accelerator; additional copyin or copyout may be required to prevent incorrect transfer of uninitialized value
IntroDataConstructCheck_MustBeInConditionalOrSurroundIfAndElse=Data construct must either be inside the conditional statement or surround both the if statement and its else clause
IntroDataConstructCheck_NoDataTransfer=Resulting data construct cannot do any data transfer
IntroDataConstructCheck_WillContainBadBreak=Construct will contain break statement (line %d) that may cause control flow to leave the construct prematurely
IntroDataConstructCheck_WillContainBadContinue=Construct will contain continue statement (line %d) that may cause control flow to leave the construct prematurely
IntroDataConstructCheck_WillContainGotoStatement=Construct will contain goto statement (line %d) that may cause control flow to leave the construct prematurely
IntroDataConstructCheck_WillContainReturnStatement=Construct will contain return statement (line %d) that may cause control flow to leave the construct prematurely
IntroDataConstructCheck_WillNotSurroundAnyStatements=Data construct will not surround any statements
IntroDataConstructCheck_WouldSurroundDeclarationScopeErrors=Construct would surround variable declaration and cause scope errors
IntroOpenACCLoopCheck_CannotParallelizeCarriesDependence=This loop cannot be parallelized because it carries a dependence.
IntroOpenACCLoopCheck_KernelsCannotInParallelRegion=A kernels loop cannot be introduced in a parallel region.
IntroOpenACCLoopCheck_ParallelCannotInKernelsRegion=A parallel loop cannot be introduced in a kernels region.
IntroOpenACCLoopCheck_PragmaCannotBeAddedHasPragma=A pragma cannot be added to a loop that already has a pragma on it.
IntroRoutineCheck_CannotFindFunctionDefinition=Cannot find function definition.
LoopCuttingCheck_CannotCutCarriesDependence=This loop cannot be cut because it carries a dependence.
LoopCuttingCheck_DivisibleByIterationFactor=divisible by the intended loop's iteration factor.
LoopCuttingCheck_FactorMustBeGreater=LoopCut factor must be greater than and 
LoopCuttingCheck_InvalidCutFactor=Invalid cut factor (<= 0).
LoopCuttingCheck_NameAlreadyExists=Index variable name already exists in scope.
MergeDataConstructsCheck_MustBeDataConstruct=The pragma must be a data construct
MergeDataConstructsCheck_MustBeFollowedByDataConstruct=The data construct must be immediately followed by another data construct
MergeDataConstructsCheck_ShouldBeCompoundStatements=Both data regions should be compound statements to perform the merge
MergeDataConstructsCheck_VariableShadowingMayOccur=A definition of \"{0}\" in the first construct may shadow \"{1}\" used in the second construct
NullCheck_DependencesCouldNotBeAnalyzed=Dependences could not be analyzed
NullCheck_LoopContainsUnsupportedStatement=Loop contains unsupported statement: 
NullCheck_LoopFormNotSupported=Loop form not supported (not a 0-based counted loop).
NullCheck_LoopIsPerfectNest=Loop is a perfect loop nest.
NullCheck_LoopUpperBound=Loop upper bound is %d.
StripMineCheck_FactorMustBeGreaterAndDivisible=Strip mine factor must be greater than and divisible by the intended loop's iteration factor
StripMineCheck_InnerNameAlreadyExists=Inner index variable name already exists in scope
StripMineCheck_InvalidStripFactor=Invalid strip factor (<= 0)
StripMineCheck_OuterNameAlreadyExists=Outer index variable name already exists in scope
StripMineCheck_OverflowWillOccur=Loop range overflow will not be handled, but the loop upper bound is not divisible by strip factor, so overflow will occur
TileLoopsCheck_HeightMustBe=Height must be at least 1
TileLoopsCheck_LoopContainsPragma=This loop contains an ACC pragma.
TileLoopsCheck_MustBeTwoLoops=There must be two nested loops to perform loop tiling.
TileLoopsCheck_OnlyPerfectlyNestedLoops=Only perfectly nested loops can be tiled.
TileLoopsCheck_WidthMustBe=Width must be at least 1
UnrollLoopCheck_CannotDetermineLowerBound=Can't determine loop lower bound
UnrollLoopCheck_CannotDetermineUpperBound=Can't determine loop upper bound
UnrollLoopCheck_CantDetermineLowerBound=Can't determine loop lower bound
UnrollLoopCheck_CantDetermineUpperBound=Can't determine loop upper bound
UnrollLoopCheck_CantUnrollMoreTimesThanLoopRuns=Can't unroll loop more times than the loop runs
UnrollLoopCheck_IndexVariableChangedInBody=Loop index variable is changed in the loop body. Cannot perform unrolling\!
UnrollLoopCheck_InvalidLoopUnrollingFactor=Invalid loop unroll factor\! (<= 0)
UnrollLoopCheck_InvalidUnrollFactor=Invalid loop unroll factor\! (<= 0)
UnrollLoopCheck_LoopBodyIsEmpty=Loop body is empty -- nothing to unroll\!
UnrollLoopCheck_LoopContainsUnsupported=Loop contains unsupported statement: 
UnrollLoopCheck_LoopContainsUnsupportedStatement=Loop contains unsupported statement: 
UnrollLoopCheck_LoopFormNotSupported=Loop form not supported
UnrollLoopCheck_LoopIndexVariableChanged=Loop index variable is changed in the loop body. Cannot perform unrolling\!
UnrollLoopCheck_NothingToUnroll=Loop body is empty -- nothing to unroll\!
UnrollLoopCheck_TooManyTimes=Can't unroll loop more times than the loop runs
UnrollLoopCheck_UpperBoundIsNotConstant=Upper bound is not a constant value. Cannot perform unrolling\!
UnrollLoopCheck_UpperBoundNotConstant=Upper bound is not a constant value. Cannot perform unrolling\!
