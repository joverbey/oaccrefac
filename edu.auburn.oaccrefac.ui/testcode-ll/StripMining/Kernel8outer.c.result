		for (int kx_0 = 1; kx_0 < 3; kx_0 += 3) /*<<<<< 1294, 1, 1313, 1, Kernel8outer */
		{
			for (kx = kx_0; (kx < kx_0 + 3 && kx < 3); kx++) {
				for (ky = 1; ky < as2.Inner_loops; ky++) {
					as1.Du1[ky] = as1.U1[nl1][ky + 1][kx]
							- as1.U1[nl1][ky - 1][kx];
					as1.Du2[ky] = as1.U2[nl1][ky + 1][kx]
							- as1.U2[nl1][ky - 1][kx];
					as1.Du3[ky] = as1.U3[nl1][ky + 1][kx]
							- as1.U3[nl1][ky - 1][kx];
					as1.U1[nl2][ky][kx] = as1.U1[nl1][ky][kx]
							+ as1.Xtra[1] * as1.Du1[ky]
							+ as1.Xtra[2] * as1.Du2[ky]
							+ as1.Xtra[3] * as1.Du3[ky]
							+ as1.Xtra[34]
									* (as1.U1[nl1][ky][kx + 1]
											- 2.0 * as1.U1[nl1][ky][kx]
											+ as1.U1[nl1][ky][kx - 1]);
					as1.U2[nl2][ky][kx] = as1.U2[nl1][ky][kx]
							+ as1.Xtra[4] * as1.Du1[ky]
							+ as1.Xtra[5] * as1.Du2[ky]
							+ as1.Xtra[6] * as1.Du3[ky]
							+ as1.Xtra[34]
									* (as1.U2[nl1][ky][kx + 1]
											- 2.0 * as1.U2[nl1][ky][kx]
											+ as1.U2[nl1][ky][kx - 1]);
					as1.U3[nl2][ky][kx] = as1.U3[nl1][ky][kx]
							+ as1.Xtra[7] * as1.Du1[ky]
							+ as1.Xtra[8] * as1.Du2[ky]
							+ as1.Xtra[9] * as1.Du3[ky]
							+ as1.Xtra[34]
									* (as1.U3[nl1][ky][kx + 1]
											- 2.0 * as1.U3[nl1][ky][kx]
											+ as1.U3[nl1][ky][kx - 1]);
				}
			}
		}
